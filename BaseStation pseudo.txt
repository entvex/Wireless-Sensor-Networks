#Pseudo code for the basestation V1

#Node A = basestation
#Node B = south
#Node C = north
#Node D = moving node

struct response { int position ; float heartRate; }

class Program {
	#Contain the last known positions for the moving node (D)
	positionArray is an array of 10 integers.
	threshold is a float
	
	while(true)
	{
		#Position defines a relative position of the moving node.
		#assume position at base station = 500
		#position -> 1000, means it is moving towards the south
		#position -> 0, means it is moving towards the north
		
		signalStrength = call probeNode()
		
		#If signalStrength is OK, we just call directly.
		#Else we call a relay node (B or C) based on the last known position of node D
		if(signalStrength)
			call sendDirect()
		else if signalStrength is below threshold
			float lastPosition = call estimateLastPosition()
			if(lastPosition > 500)
				call sendUsingSouthNode()
			else
				call sendUsingNorthNode()
	}
	
	event handler response(response) {
		if(result == SUCCESS)
			call blink LED to signal response()
			position = extract position from response
			heartRate = extract heart rate from response
			positionArray += position
			print "heart rate: + heartRate"
		else
			print("Something went wrong. Response broken")
	}
}

void function probeNode () {
	#metageek.com/training/resources/understanding-rssi.html
	rssi = get rssi by probing moving node
	if (rssi > threshold)
		return rssi
	else
		return 0
}

#Estimates the last position based on previous positions
#Eg pos = 601, 602, 603, 604, 605
void function estimateLastPosition () {
	position is float
	lastPosition = positionArray[0]
	
	for(i = 1; i <= sizeof(positionArray), i++) {
		position += positionArray[i]
	}
	previousPosition = position/(sizeof(positionArray)-1)
	
	if (lastPosition <= previousPosition)
		return (lastPosition - (previousPosition-lastPosition))
	else if (lastPosition >= previousPosition)
		return (lastPosition + (lastPosition-previousPosition)
	else
		return -1;
	}
}

void function sendDirect() {
	msg = a message with the request
	send(address of node D, length, msg)
	call blink LED to signal send()
}

void function sendUsingSouthNode() {
	msg = a message with the request
	send(address of node B, length, msg)
	call blink LED to signal send()
}

void function sendUsingNorthNode() {
	msg = a message with the request
	send(address of node C, length, msg)
	call blink LED to signal send()
}
